// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/buildpacks/pack (interfaces: AssetFetcher)

// Package testmocks is a generated GoMock package.
package testmocks

import (
	asset "github.com/buildpacks/pack/internal/asset"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAssetFetcher is a mock of AssetFetcher interface
type MockAssetFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockAssetFetcherMockRecorder
}

// MockAssetFetcherMockRecorder is the mock recorder for MockAssetFetcher
type MockAssetFetcherMockRecorder struct {
	mock *MockAssetFetcher
}

// NewMockAssetFetcher creates a new mock instance
func NewMockAssetFetcher(ctrl *gomock.Controller) *MockAssetFetcher {
	mock := &MockAssetFetcher{ctrl: ctrl}
	mock.recorder = &MockAssetFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAssetFetcher) EXPECT() *MockAssetFetcherMockRecorder {
	return m.recorder
}

// FetchAssets mocks base method
func (m *MockAssetFetcher) FetchAssets(arg0 []string, arg1 ...asset.AssetFetcherOptions) ([]asset.Readable, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchAssets", varargs...)
	ret0, _ := ret[0].([]asset.Readable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAssets indicates an expected call of FetchAssets
func (mr *MockAssetFetcherMockRecorder) FetchAssets(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAssets", reflect.TypeOf((*MockAssetFetcher)(nil).FetchAssets), varargs...)
}
