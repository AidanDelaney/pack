// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/buildpacks/pack/internal/asset (interfaces: ImageCacheFetcher)

// Package testmocks is a generated GoMock package.
package testmocks

import (
	context "context"
	reflect "reflect"

	imgutil "github.com/buildpacks/imgutil"
	gomock "github.com/golang/mock/gomock"

	config "github.com/buildpacks/pack/config"
)

// MockImageCacheFetcher is a mock of ImageCacheFetcher interface
type MockImageCacheFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockImageCacheFetcherMockRecorder
}

// MockImageCacheFetcherMockRecorder is the mock recorder for MockImageCacheFetcher
type MockImageCacheFetcherMockRecorder struct {
	mock *MockImageCacheFetcher
}

// NewMockImageCacheFetcher creates a new mock instance
func NewMockImageCacheFetcher(ctrl *gomock.Controller) *MockImageCacheFetcher {
	mock := &MockImageCacheFetcher{ctrl: ctrl}
	mock.recorder = &MockImageCacheFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockImageCacheFetcher) EXPECT() *MockImageCacheFetcherMockRecorder {
	return m.recorder
}

// FetchImageAssets mocks base method
func (m *MockImageCacheFetcher) FetchImageAssets(arg0 context.Context, arg1 config.PullPolicy, arg2 ...string) ([]imgutil.Image, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchImageAssets", varargs...)
	ret0, _ := ret[0].([]imgutil.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchImageAssets indicates an expected call of FetchImageAssets
func (mr *MockImageCacheFetcherMockRecorder) FetchImageAssets(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchImageAssets", reflect.TypeOf((*MockImageCacheFetcher)(nil).FetchImageAssets), varargs...)
}
